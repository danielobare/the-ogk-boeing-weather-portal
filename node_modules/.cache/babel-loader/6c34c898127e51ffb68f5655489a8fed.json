{"ast":null,"code":"var _jsxFileName = \"/home/danielobare/Documents/gml/react-weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Forecast from \"./components/forecast/forecast\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./api\";\nimport \"./App.css\";\nimport Search from \"./components/search/search\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport Title from \"./components/Title\";\nimport WeatherAnalysis from \"./components/WeatherAnalysis\"; // import boeing from \"./components/search/boeing\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherSource = \"http://localhost:\";\n\nfunction App() {\n  _s();\n\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  state = {\n    poems: [],\n    showForm: false,\n    favoritePoems: []\n  };\n  componentDidMount();\n  {\n    fetch(PoemSource).then(res => res.json()).then(poems => this.setState({\n      poems: poems\n    }));\n  }\n\n  handleClick = () => {\n    this.setState({\n      showForm: !this.state.showForm\n    });\n    console.log(this.state.showForm);\n  };\n\n  appendPiece = poem => {\n    console.log(poem);\n    const configObject = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(poem)\n    };\n    fetch(PoemSource, configObject).then(res => res.json()).then(poem => this.setState({\n      poems: [...this.state.poems, poem]\n    }));\n  };\n\n  showFavoritePoems = () => {\n    return this.state.poems.filter(poem => this.state.favoritePoems.includes(poem.id));\n  };\n\n  const handleOnSearchChange = searchData => {\n    const [lat, lon] = searchData.value.split(\" \");\n    const currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    const forecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    Promise.all([currentWeatherFetch, forecastFetch]).then(async response => {\n      const weatherResponse = await response[0].json();\n      const forcastResponse = await response[1].json();\n      setCurrentWeather({\n        city: searchData.label,\n        ...weatherResponse\n      });\n      setForecast({\n        city: searchData.label,\n        ...forcastResponse\n      });\n    }).catch(console.log);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"boeing\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      onSearchChange: handleOnSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n      data: currentWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 26\n    }, this), forecast && /*#__PURE__*/_jsxDEV(Forecast, {\n      data: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WWp4biUQ6yxZ26omAvrL3l/oQ6o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Forecast","WEATHER_API_URL","WEATHER_API_KEY","Search","CurrentWeather","Title","WeatherAnalysis","WeatherSource","App","currentWeather","setCurrentWeather","forecast","setForecast","state","poems","showForm","favoritePoems","componentDidMount","fetch","PoemSource","then","res","json","setState","handleClick","console","log","appendPiece","poem","configObject","method","headers","Accept","body","JSON","stringify","showFavoritePoems","filter","includes","id","handleOnSearchChange","searchData","lat","lon","value","split","currentWeatherFetch","forecastFetch","Promise","all","response","weatherResponse","forcastResponse","city","label","catch"],"sources":["/home/danielobare/Documents/gml/react-weather-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Forecast from \"./components/forecast/forecast\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./api\";\nimport \"./App.css\";\nimport Search from \"./components/search/search\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport Title from \"./components/Title\";\nimport WeatherAnalysis from \"./components/WeatherAnalysis\";\n// import boeing from \"./components/search/boeing\";\n\nconst WeatherSource = \"http://localhost:\"\n\nfunction App() {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n\n  state = {\n    poems: [],\n    showForm: false,\n    favoritePoems: [],\n  };\n\n  componentDidMount() ;{\n    fetch(PoemSource)\n      .then((res) => res.json())\n      .then((poems) =>\n        this.setState({\n          poems: poems,\n        })\n      );\n  }\n\n  handleClick = () => {\n    this.setState({\n      showForm: !this.state.showForm,\n    });\n    console.log(this.state.showForm);\n  };\n\n  appendPiece = (poem) => {\n    console.log(poem);\n    const configObject = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(poem),\n    };\n\n    fetch(PoemSource, configObject)\n      .then((res) => res.json())\n      .then((poem) =>\n        this.setState({\n          poems: [...this.state.poems, poem],\n        })\n      );\n  };\n\n  showFavoritePoems = () => {\n    return this.state.poems.filter((poem) =>\n      this.state.favoritePoems.includes(poem.id)\n    );\n  };\n\n  const handleOnSearchChange = (searchData) => {\n    const [lat, lon] = searchData.value.split(\" \");\n\n    const currentWeatherFetch = fetch(\n      `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n    const forecastFetch = fetch(\n      `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n\n    Promise.all([currentWeatherFetch, forecastFetch])\n      .then(async (response) => {\n        const weatherResponse = await response[0].json();\n        const forcastResponse = await response[1].json();\n\n        setCurrentWeather({ city: searchData.label, ...weatherResponse });\n        setForecast({ city: searchData.label, ...forcastResponse });\n      })\n      .catch(console.log);\n  };\n\n  return (\n    <div className=\"container\">\n      <boeing />\n      <Title />\n      <Search onSearchChange={handleOnSearchChange} />\n      {currentWeather && <CurrentWeather data={currentWeather} />}\n      {forecast && <Forecast data={forecast} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}